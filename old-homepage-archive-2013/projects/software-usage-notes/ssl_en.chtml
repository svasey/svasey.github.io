<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.5: http://docutils.sourceforge.net/" />
<title>SSL management</title>
<link rel="stylesheet" href="../../css/print.css" type="text/css" />
</head>
<body>
<div class="document">


<div class="section" id="ssl-management">
<h2>SSL management</h2>
<p>This page documents some things I had to do to manage my <a class="reference external" href="http://en.wikipedia.org/wiki/Transport_Layer_Security">SSL</a> certificates and
how I did them using <a class="reference external" href="http://www.openssl.org/">OpenSSL</a></p>
<div class="contents local topic" id="contents">
<p class="topic-title first">Contents</p>
<ul class="simple">
<li><a class="reference internal" href="#creating-your-own-ca-and-certificate" id="id1">Creating your own CA and certificate</a><ul>
<li><a class="reference internal" href="#creating-the-root-certificate" id="id2">Creating the root certificate</a></li>
<li><a class="reference internal" href="#creating-the-certificate-signing-request-csr" id="id3">Creating the certificate signing request (CSR)</a></li>
<li><a class="reference internal" href="#creating-a-configuration-file" id="id4">Creating a configuration file</a></li>
<li><a class="reference internal" href="#creating-the-index-files" id="id5">Creating the index files</a></li>
<li><a class="reference internal" href="#generating-the-certificate-and-the-crl" id="id6">Generating the certificate and the CRL</a></li>
<li><a class="reference internal" href="#checking-the-content-of-your-certificate" id="id7">Checking the content of your certificate</a></li>
<li><a class="reference internal" href="#revoking-a-certificate" id="id8">Revoking a certificate</a></li>
</ul>
</li>
<li><a class="reference internal" href="#references" id="id9">References</a></li>
</ul>
</div>
<div class="section" id="creating-your-own-ca-and-certificate">
<h3>Creating your own CA and certificate</h3>
<div class="section" id="creating-the-root-certificate">
<h4>Creating the root certificate</h4>
<p>This creates the root certificate that you will use to sign everything else:</p>
<pre class="literal-block">
openssl req -newkey rsa:4096 -sha512 -days 9999 -x509 -nodes -out example_root.cer
</pre>
<p>This also create a <tt class="docutils literal"><span class="pre">privkey.pem</span></tt> file, containing your root private key: keep
this in a secure place !</p>
</div>
<div class="section" id="creating-the-certificate-signing-request-csr">
<h4>Creating the certificate signing request (CSR)</h4>
<p>This will be used to sign your certificate:</p>
<pre class="literal-block">
openssl req -newkey rsa:4096 -sha512 -nodes -out example_com.csr \
    -keyout example_com.key
</pre>
</div>
<div class="section" id="creating-a-configuration-file">
<h4>Creating a configuration file</h4>
<p>Certificate creation in openssl is so complicated that you need a configuration
file to indicate all the options. This is the one I used:</p>
<pre class="literal-block">
# Mainly copied from:
# http://swearingscience.com/2009/01/18/openssl-self-signed-ca/

[ ca ]
default_ca = myca

[ crl_ext ]
# issuerAltName=issuer:copy  #this would copy the issuer name to altname
authorityKeyIdentifier=keyid:always

 [ myca ]
 dir = ./
 new_certs_dir = $dir
 unique_subject = no
 certificate = $dir/example_root.cer
 database = $dir/certindex
 private_key = $dir/privkey.pem
 serial = $dir/certserial
 default_days = 9999
 default_md = sha512
 policy = myca_policy
 x509_extensions = myca_extensions
 crlnumber = $dir/crlnumber
 default_crl_days = 9999

 [ myca_policy ]
 commonName = supplied
 stateOrProvinceName = supplied
 countryName = optional
 emailAddress = optional
 organizationName = supplied
 organizationalUnitName = optional

 [ myca_extensions ]
 basicConstraints = CA:false
 subjectKeyIdentifier = hash
 authorityKeyIdentifier = keyid:always
 keyUsage = digitalSignature,keyEncipherment
 extendedKeyUsage = serverAuth
 crlDistributionPoints = URI:http://certs.example.com/example_root.crl
 subjectAltName  = &#64;alt_names

 [alt_names]
 DNS.1 = example.com
 DNS.2 = *.example.com
</pre>
<p>The important lines are the DNS.1 and DNS.2 lines: put in all the domains you
want the certificate to be valid with (of course, you can add DNS.3, DNS.4
etc... as you like). The star (<tt class="docutils literal"><span class="pre">*</span></tt>) means all subdomains, so <tt class="docutils literal"><span class="pre">*.example.com</span></tt>
will match <tt class="docutils literal"><span class="pre">www.example.com</span></tt> as well as <tt class="docutils literal"><span class="pre">very.complicated.example.com</span></tt></p>
<p>Also pay attention to the <tt class="docutils literal"><span class="pre">default_md</span></tt> and <tt class="docutils literal"><span class="pre">default_days</span></tt> variables.</p>
<p>Save your configuration files to e.g <tt class="docutils literal"><span class="pre">example_root.conf</span></tt>.</p>
</div>
<div class="section" id="creating-the-index-files">
<h4>Creating the index files</h4>
<p>Once you have created the configuration file, you should create an empty index
file, and a serial number file for the certificate index and the revocation
list:</p>
<pre class="literal-block">
touch certindex
echo 000a &gt; certserial
echo 000a &gt; crlnumber
</pre>
</div>
<div class="section" id="generating-the-certificate-and-the-crl">
<h4>Generating the certificate and the CRL</h4>
<p>Finally, generate your certificate:</p>
<pre class="literal-block">
openssl ca -batch -config example_root.conf -notext -in example.com.csr \
    -out example.com.cer
</pre>
<p>And generate your (empty) certificate revocation list:</p>
<pre class="literal-block">
openssl ca -config example_root.conf -gencrl -keyfile privkey.pem \
    -cert example_root.cer -out example_root.crl.pem
 openssl crl -inform PEM -in example_root.crl.pem -outform DER -out \
    example_root.crl &amp;&amp; rm example_root.crl.pem
</pre>
<p>The last line is necessary because <a class="reference external" href="http://www.ietf.org/rfc/rfc5280.txt">RFC 5280</a> requires the CRL to be encoded
using <tt class="docutils literal"><span class="pre">DER</span></tt>.</p>
</div>
<div class="section" id="checking-the-content-of-your-certificate">
<h4>Checking the content of your certificate</h4>
<p>Use this command to see that the content of your certificate is what you
expect:</p>
<pre class="literal-block">
openssl x509 -text -noout &lt; example_com.cer
</pre>
<p>To check the fingerprint, use:</p>
<pre class="literal-block">
openssl x509 -fingerprint -sha1 -noout &lt; example_com.cer
</pre>
</div>
<div class="section" id="revoking-a-certificate">
<h4>Revoking a certificate</h4>
<p>To revoke a bad certificate (here <tt class="docutils literal"><span class="pre">example.com.cer</span></tt>), update your index
using:</p>
<pre class="literal-block">
openssl ca -config example_root.conf -revoke example_com.cer \
    -keyfile privkey.pem -cert example_root.cer
</pre>
<p>Then re-generate the revocation list using the command mentionned above.</p>
</div>
</div>
<div class="section" id="references">
<h3>References</h3>
<ul class="simple">
<li>To create my own CA and use it to sign my own certificate, I followed <a class="reference external" href="http://langui.sh/2009/01/18/openssl-self-signed-ca/">this self
signed CA howto</a>.</li>
<li>To make the certificate over multiple domains, I used the
<a class="reference external" href="http://langui.sh/2009/02/28/openssl-sanucc-certificate-generation/">SAN/UCC certificate generation howto</a>.</li>
<li>To manage the certificates, I refered to <a class="reference external" href="http://gagravarr.org/writing/openssl-certs/ca.shtml">this certificate management howto</a></li>
</ul>
</div>
</div>
</div>
</body>
</html>
